var documenterSearchIndex = {"docs":
[{"location":"simulation/#Simulating-an-Experiment-from-Scratch","page":"Full Example","title":"Simulating an Experiment from Scratch","text":"","category":"section"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"Here is a worked example of simulating a partially crossed design from scratch.","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"First, some setup:","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"using DataFrames\nusing LinearAlgebra\nusing MixedModels, MixedModelsSim\nusing Random","category":"page"},{"location":"simulation/#Assemble-the-Design","page":"Full Example","title":"Assemble the Design","text":"","category":"section"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"We're going to do a 2 x 2 x 2 design. For concreteness, let's think of this as a linguistic design:","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"age old vs. young, between subjects\nfrequency high vs. low, between items\ncontext matched vs. unmatched, within both.","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"Further, let's assume we want 40 subjects and 80 items. We can specify this design as follows:","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"n_subj = 40\nn_item = 80\nsubj_btwn = Dict(:age => [\"old\", \"young\"])\nitem_btwn = Dict(:frequency => [\"high\", \"low\"])\nboth_win = Dict(:context => [\"matched\", \"unmatched\"])","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"and then generate it:","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"rng = MersenneTwister(42)  # specify our random number generator for reproducibility\ndesign = simdat_crossed(rng, n_subj, n_item;\n                        subj_btwn = subj_btwn,\n                        item_btwn = item_btwn,\n                        both_win = both_win)","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"Note that simdat_crossed returns a row table, which MixedModels.jl can process directly. For nicely displaying it, we can also convert it to a dataframe and change the factors to use pooled arrays to save a bit of memory.","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"df = pooled!(DataFrame(design))\nfirst(df, 5)","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"Note that simdat_crossed generated a column dv for our dependent variable that has been pre-populated with noise from a standard normal distribution (N(01)). Typically, we will want to scale that, but we can do that in the simulation step. Also, this dependent variable is pure noise: we haven't yet added in effects. Adding in effects also comes in the simulation step.","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"But before we get to simulating, let's fit the model to the noise, just to see how things look. We're going to use effects coding for our contrasts.","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"contrasts = Dict(:age => EffectsCoding(base=\"young\"),\n                 :frequency => EffectsCoding(base=\"high\"),\n                 :context => EffectsCoding(base=\"matched\"))\nform = @formula(dv ~ 1 + age * frequency * context +\n                    (1 + frequency + context | subj) +\n                    (1 + age + context | item))\nm0 = fit(MixedModel, form, design; contrasts=contrasts)","category":"page"},{"location":"simulation/#Assemble-the-Random-Effects","page":"Full Example","title":"Assemble the Random Effects","text":"","category":"section"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"The hard part in simulating right now is specifying the random effects. We're working on making this bit easier, but you need to specify the variance-covariance matrix of the random effects. You can see what this looks like:","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"vc = VarCorr(m0)","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"vc.σρ","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"In matrix form:","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"m0.λ","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"m0.λ[1]","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"m0.λ[2]","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"Note that the entries in m0.λ are stored in the same order as the random effects are listed in VarCorr(m0).  The off-diagonal elements are covariances and correspond to the correlations (the ρ's). The on-diagonal elements are just the standard deviations (the σ's). For this example, we'll just assume all the correlations and thus the covariances are 0 in order to make things simple. Then we only have to worry about the diagonal elements.","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"Let's assume that the variability","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"between items\nin the intercept is 1.3 times the residual variability\nin age is 0.35 times the residual variability\nin context is 0.75 times the residual variability\nbetween subjects\nin the intercept is 1.5 times the residual variability\nin frequency is 0.5 times the residual variability\nin context is 0.75 times the residual variability","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"Then we'll have the following λ matrices:","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"λitem = LowerTriangular(diagm([1.3, 0.35, 0.75]))","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"λsubj = LowerTriangular(diagm([1.5, 0.5, 0.75]))","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"For the actual optimization process, MixedModels.jl actually uses a flattened version of these stored in the θ vector. (More precisely, these λ matrices are derived from the θ vector.)","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"isapprox(m0.θ,  [flatlowertri(m0.λ[1]); flatlowertri(m0.λ[2])]; atol=0.1)","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"With that in mind, we can assemble our θ vector for simulation:","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"# make sure these are in the same order as in the model summary!\nθ = [flatlowertri(λitem); flatlowertri(λsubj)]","category":"page"},{"location":"simulation/#Assemble-the-Fixed-Effects","page":"Full Example","title":"Assemble the Fixed Effects","text":"","category":"section"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"The last two components we need are the residual variance and the effect sizes for the fixed effects.","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"σ = 5\nβ = [1.0, -1.0, 2.0, -1.5, 0.3, -1.3, 1.4, 0]","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"The entries in the β correspond to the coefficients in the model given by","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"coefnames(m0)","category":"page"},{"location":"simulation/#Simulate","page":"Full Example","title":"Simulate","text":"","category":"section"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"Now we're ready to actually simulate our data. We can use parametricbootstrap to do this: the parametric bootstrap actually works by simulating new data from an existing model and then looking at how the estimates fit to that new data look. In MixedModels.jl, you can specify different parameter values, such as the ones  we made up for our fake data.","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"# typically we would use a lot more simulations\n# but we want to be quick in this example\nsim = parametricbootstrap(MersenneTwister(12321), 20, m0; β=β, σ=σ, θ=θ)","category":"page"},{"location":"simulation/#See-your-power-and-profit!","page":"Full Example","title":"See your power and profit!","text":"","category":"section"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"Finally, we can turn this into a power table:","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"ptbl = power_table(sim)","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"We can of course convert the row table into a DataFrame:","category":"page"},{"location":"simulation/","page":"Full Example","title":"Full Example","text":"DataFrame(ptbl)","category":"page"},{"location":"#MixedModelsSim.jl","page":"Home","title":"MixedModelsSim.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [MixedModelsSim]","category":"page"},{"location":"#MixedModelsSim.cyclicshift-Tuple{AbstractArray{T,1} where T,Any}","page":"Home","title":"MixedModelsSim.cyclicshift","text":"cyclicshift(v::AbstractVector, nrow)\n\nReturn an eltype(v) matrix of size nrow by length(v) with each column consisting of v followed by a cyclic shift of v followed by ...\n\ncyclicshift('a':'d', 8)\n\n\n\n\n\n","category":"method"},{"location":"#MixedModelsSim.factorproduct-Tuple","page":"Home","title":"MixedModelsSim.factorproduct","text":"factorproduct(facs...)\n\nReturn a Vector{NamedTuple} obtained by crossing facs....\n\nThe arguments should be coerceable to a Tables.RowTable with rowtable.\n\nThe value is a Tables.RowTable and hence can be converted to a DataFrame.\n\nExample\n\njulia> DataFrame(factorproduct((item=nlevels(3,'I'),), (subj=nlevels(5), age=[\"Y\",\"Y\",\"Y\",\"O\",\"O\"])))\n15×3 DataFrame\n│ Row │ item   │ subj   │ age    │\n│     │ String │ String │ String │\n├─────┼────────┼────────┼────────┤\n│ 1   │ I1     │ S1     │ Y      │\n│ 2   │ I2     │ S1     │ Y      │\n│ 3   │ I3     │ S1     │ Y      │\n│ 4   │ I1     │ S2     │ Y      │\n│ 5   │ I2     │ S2     │ Y      │\n│ 6   │ I3     │ S2     │ Y      │\n│ 7   │ I1     │ S3     │ Y      │\n│ 8   │ I2     │ S3     │ Y      │\n│ 9   │ I3     │ S3     │ Y      │\n│ 10  │ I1     │ S4     │ O      │\n│ 11  │ I2     │ S4     │ O      │\n│ 12  │ I3     │ S4     │ O      │\n│ 13  │ I1     │ S5     │ O      │\n│ 14  │ I2     │ S5     │ O      │\n│ 15  │ I3     │ S5     │ O      │\n\n\n\n\n\n","category":"method"},{"location":"#MixedModelsSim.flatlowertri-Tuple{LinearAlgebra.LowerTriangular}","page":"Home","title":"MixedModelsSim.flatlowertri","text":"flatlowertri(::LowerTriangular)\n\nReturns the lower triangular flattened into 1D array in row-major order.\n\n\n\n\n\n","category":"method"},{"location":"#MixedModelsSim.nlevels","page":"Home","title":"MixedModelsSim.nlevels","text":"nlevels(nlev, tag='S')\n\nReturn a Vector{String} of tag followed by 1:nlev left-padded with zeros\n\nExamples\n\njulia> show(nlevels(10))\n[\"S01\", \"S02\", \"S03\", \"S04\", \"S05\", \"S06\", \"S07\", \"S08\", \"S09\", \"S10\"]\n\n\n\n\n\n","category":"function"},{"location":"#MixedModelsSim.pooled!","page":"Home","title":"MixedModelsSim.pooled!","text":"pooled!(df, cols::Type=Union{AbstractString,Missing})\n\nLike DataFrames.categorical! but converting columns to PooledArrays\n\nwarning: Warning\nThis method is not type-specific in the first argument order to eliminate a dependency on DataFrames.jl. It nonetheless expects a DataFrame as its first argument\n\n\n\n\n\n","category":"function"},{"location":"#MixedModelsSim.power_table","page":"Home","title":"MixedModelsSim.power_table","text":"power_table(sim, alpha = 0.05)\n\nReturns a row table with fields coefname and power  based on the proportion of simulated p-values less than alpha, for sim, the output of parametricbootstrap.\n\n\n\n\n\n","category":"function"},{"location":"#MixedModelsSim.simdat_crossed-Tuple","page":"Home","title":"MixedModelsSim.simdat_crossed","text":"simdat_crossed([RNG], subj_n, item_n;\n               subj_btwn=nothing, item_btwn=nothing, both_win=nothing)\n\nReturn a row table with a design specified by the:\n\nnumber of subjects (subj_n),\nnumber of items (item_n)\nbetween-subject factors (subj_btwn)\nbetween-item factors (item_btwn)\nwithin-subject/item factors (both_win)\n\nIf a factor is both between-subject and between-item, put it in both subj_btwn and item_btwn with the same keys and the same levels.\n\nFactors should be specified as dictionaries in the following format:\n\nDict(\n    :factor1_name => [\"F1_level1\", \"F1_level2\"],\n    :factor2_name => [\"F2_level1\", \"F2_level2\", \"F2_level3\"]\n)\n\nIn addition to design, the rowtable contains a field dv pre-populated with N(0,1) noise as a basis for further simulating a design.\n\n\n\n\n\n","category":"method"}]
}
