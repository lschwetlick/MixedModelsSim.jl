var documenterSearchIndex = {"docs":
[{"location":"#MixedModelsSim.jl","page":"Home","title":"MixedModelsSim.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [MixedModelsSim]","category":"page"},{"location":"#MixedModelsSim.cyclicshift-Tuple{AbstractArray{T,1} where T,Any}","page":"Home","title":"MixedModelsSim.cyclicshift","text":"cyclicshift(v::AbstractVector, nrow)\n\nReturn an eltype(v) matrix of size nrow by length(v) with each column consisting of v followed by a cyclic shift of v followed by ...\n\nThe return value is used to counterbalance levels of conditions in withinitem.\n\ncyclicshift('a':'d', 8)\n\n\n\n\n\n","category":"method"},{"location":"#MixedModelsSim.factorproduct-Tuple","page":"Home","title":"MixedModelsSim.factorproduct","text":"factorproduct(facs...)\n\nReturn a Vector{NamedTuple} obtained by crossing facs....\n\nThe arguments should be coerceable to a Tables.RowTable with rowtable.\n\nThe value is a Tables.RowTable and hence can be converted to a DataFrame.\n\nExample\n\njulia> DataFrame(factorproduct((item=nlevels(3,'I'),), (subj=nlevels(5), age=[\"Y\",\"Y\",\"Y\",\"O\",\"O\"])))\n15×3 DataFrame\n│ Row │ item   │ subj   │ age    │\n│     │ String │ String │ String │\n├─────┼────────┼────────┼────────┤\n│ 1   │ I1     │ S1     │ Y      │\n│ 2   │ I2     │ S1     │ Y      │\n│ 3   │ I3     │ S1     │ Y      │\n│ 4   │ I1     │ S2     │ Y      │\n│ 5   │ I2     │ S2     │ Y      │\n│ 6   │ I3     │ S2     │ Y      │\n│ 7   │ I1     │ S3     │ Y      │\n│ 8   │ I2     │ S3     │ Y      │\n│ 9   │ I3     │ S3     │ Y      │\n│ 10  │ I1     │ S4     │ O      │\n│ 11  │ I2     │ S4     │ O      │\n│ 12  │ I3     │ S4     │ O      │\n│ 13  │ I1     │ S5     │ O      │\n│ 14  │ I2     │ S5     │ O      │\n│ 15  │ I3     │ S5     │ O      │\n\n\n\n\n\n","category":"method"},{"location":"#MixedModelsSim.nlevels","page":"Home","title":"MixedModelsSim.nlevels","text":"nlevels(nlev, tag='S')\n\nReturn a Vector{String} of tag followed by 1:nlev left-padded with zeros\n\nExamples\n\njulia> show(nlevels(10))\n[\"S01\", \"S02\", \"S03\", \"S04\", \"S05\", \"S06\", \"S07\", \"S08\", \"S09\", \"S10\"]\n\n\n\n\n\n","category":"function"},{"location":"#MixedModelsSim.pooled!","page":"Home","title":"MixedModelsSim.pooled!","text":"pooled!(df::DataFrame, cols::Type=Union{AbstractString,Missing})\n\nLike DataFrames.categorical! but converting columns to PooledArrays\n\n\n\n\n\n","category":"function"},{"location":"#MixedModelsSim.power_table","page":"Home","title":"MixedModelsSim.power_table","text":"power_table(sim, alpha = 0.05)\n\nReturns a DataFrame with two columns, coefname and power, with the proportion of  simulated p-values less than alpha, for sim, the output of simulate_waldtests.\n\n\n\n\n\n","category":"function"},{"location":"#MixedModelsSim.replicate-Tuple{Function,Integer}","page":"Home","title":"MixedModelsSim.replicate","text":"replicate(f::Function, n::Integer; use_threads=false)\n\nReturn a vector of the values of n calls to f() - used in simulations where the value of f is stochastic.\n\nNote that if f() is not thread-safe or depends on a non thread-safe RNG,     then you must set use_threads=false. Also note that ordering of replications     is not guaranteed when use_threads=true, although the replications are not     otherwise affected for thread-safe f().\n\n\n\n\n\n","category":"method"},{"location":"#MixedModelsSim.sim_to_df-Tuple{Any}","page":"Home","title":"MixedModelsSim.sim_to_df","text":"sim_to_df(sim)\n\nReturns a DataFrame with 6 columns: iteration, coefname, beta, se, z, p.  Rows are all the coefficients for each iteration of sim, the output of simulate_waldtests.  iteration is not guaranteed to be the same across runs of simulate_waldtests with the same seed,  even though the samples will be.\n\n\n\n\n\n","category":"method"},{"location":"#MixedModelsSim.simdata_crossed","page":"Home","title":"MixedModelsSim.simdata_crossed","text":"simdat_crossed(RNG, subj_n, item_n; subj_btwn, item_btwn, both_win)\nsimdat_crossed(subj_n, item_n; subj_btwn, item_btwn, both_win)\n\nReturn a DataFrame with a design specified by the:\n\nnumber of subjects (subj_n), \nnumber of items (item_n)\nbetween-subject factors (subj_btwn)\nbetween-item factors (item_btwn)\nwithin-subject/item factors (both_win)\n\nFactors should be specified as Dicts in the following format:\n\nDict(     \"factor1name\" => [\"F1level1\", \"F1level2\"],     \"factor2name\" => [\"F2level1\", \"F2level2\", \"F2_level3\"] )\n\n\n\n\n\n","category":"function"},{"location":"#MixedModelsSim.simulate_waldtests-Union{Tuple{T}, Tuple{Random.AbstractRNG,Integer,MixedModels.MixedModel{T}}} where T","page":"Home","title":"MixedModelsSim.simulate_waldtests","text":"simulate_waldtests(rng::AbstractRNG, nsamp::Integer, m::LinearMixedModel;\n    β = m.β, σ = m.σ, θ = m.θ, use_threads=false)\nsimulate_waldtests(nsamp::Integer, m::LinearMixedModel;\n    β = m.β, σ = m.σ, θ = m.θ, use_threads=false)\n\nReturn a Vector of βs, z- and p-values for each coefficient in a mixed model. This is similar to the MixedModels.parametricbootstrap, but returns test statistics instead of estimates. This is useful for power analyses.\n\nPerform nsamp parametric bootstrap replication fits of m, returning a Vector of named tuples of the associated z- and p-values for the coefficents/\n\nThe default random number generator is Random.GLOBAL_RNG.\n\nNamed Arguments\n\nβ, σ, and θ are the values of m's parameters for simulating the responses.\n\nuse_threads determines whether threads are used to parallelize the computation. Note that this functionality depends on the development version\n\nusing MixedModels, MixedModelsSim\nusing DataFrames, Gadfly, Random, StaticArrays, StatsBase, Tables\n\nkb07 = MixedModels.dataset(:kb07);\nform = @formula(rt_raw ~ 1 + spkr + prec + load + (1+spkr+prec+load|subj) + (1+spkr+prec+load|item));\ncont = Dict(:spkr => HelmertCoding(),\n            :prec => HelmertCoding(),\n            :load => HelmertCoding())\nfm1 = fit(MixedModel, form, kb07, contrasts=cont, REML=false);\nzpmt = simulate_waldtests(MersenneTwister(42),10,fm1,use_threads=true);\n\nmean(getindex.(columntable(zpmt).p, 1) .< 0.05)\nmean(getindex.(columntable(zpmt).p, Symbol(\"(Intercept)\")) .< 0.05)\n\nmean(getindex.(columntable(zpmt).p, 2) .< 0.05)\nmean(getindex.(columntable(zpmt).p, Symbol(\"spkr: old\")) .< 0.05)\n\nsamples = DataFrame(columntable(zpmt).β)\nshortestcovint(samples[!,Symbol(\"prec: maintain\")])\n\nplot(samples, layer(x=Symbol(\"load: yes\")),\n    Geom.density,\n    Guide.xlabel(\"Bootstrap estimates of 'load: yes'\"))\n\nplot(stack(samples),\n   layer(x=:value, color=:variable, xgroup=:variable),\n   Geom.subplot_grid(Geom.density, free_x_axis=true),\n   Guide.xlabel(\"Bootstrap estimates of β\"))\n\n\n\n\n\n","category":"method"},{"location":"#MixedModelsSim.withinitem-Tuple{Any,Any}","page":"Home","title":"MixedModelsSim.withinitem","text":"withinitem(nitem, df)\n\nReturn a DataFrame of item with nitem levels and balanced columns of conditions from df\n\n\n\n\n\n","category":"method"}]
}
